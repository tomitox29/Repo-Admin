<?php

namespace Container80LivO1;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPrestashop_Core_Admin_MultistoreService extends AdminKernelProdContainer
{
    /*
     * Gets the public 'prestashop.core.admin.multistore' shared autowired service.
     *
     * @return \PrestaShopBundle\Controller\Admin\MultistoreController
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['prestashop.core.admin.multistore'] = $instance = new \PrestaShopBundle\Controller\Admin\MultistoreController(($container->services['PrestaShop\\PrestaShop\\Adapter\\Feature\\MultistoreFeature'] ?? self::getMultistoreFeatureService($container)), ($container->services['.container.private.prestashop.adapter.shop.context'] ??= new \PrestaShop\PrestaShop\Adapter\Shop\Context()), ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), ($container->services['PrestaShop\\PrestaShop\\Adapter\\Product\\Repository\\ProductRepository'] ?? $container->load('getProductRepositoryService')), ($container->services['PrestaShop\\PrestaShop\\Core\\Util\\ColorBrightnessCalculator'] ??= new \PrestaShop\PrestaShop\Core\Util\ColorBrightnessCalculator()), ($container->services['PrestaShopBundle\\Service\\Multistore\\CustomizedConfigurationChecker'] ?? $container->load('getCustomizedConfigurationCheckerService')), ($container->services['PrestaShop\\PrestaShop\\Adapter\\LegacyContext'] ?? self::getLegacyContextService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)));

        $instance->setContainer(($container->privates['.service_locator.JQQ__7t'] ?? $container->load('get_ServiceLocator_JQQ7tService'))->withContext('prestashop.core.admin.multistore', $container));

        return $instance;
    }
}
